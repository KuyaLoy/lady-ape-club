<svg xmlns="http://www.w3.org/2000/svg" width="35" height="35" viewBox="0 0 35 35"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <path id="Subtraction_13" data-name="Subtraction 13" d="M17.5,35a17.624,17.624,0,0,1-3.527-.356,17.405,17.405,0,0,1-6.258-2.633,17.551,17.551,0,0,1-6.34-7.7,17.415,17.415,0,0,1-1.02-3.285,17.67,17.67,0,0,1,0-7.054A17.405,17.405,0,0,1,2.989,7.716a17.55,17.55,0,0,1,7.7-6.34A17.415,17.415,0,0,1,13.973.356a17.67,17.67,0,0,1,7.054,0,17.406,17.406,0,0,1,6.258,2.633,17.55,17.55,0,0,1,6.34,7.7,17.415,17.415,0,0,1,1.02,3.285,17.67,17.67,0,0,1,0,7.054,17.406,17.406,0,0,1-2.633,6.258,17.551,17.551,0,0,1-7.7,6.34,17.415,17.415,0,0,1-3.285,1.02A17.624,17.624,0,0,1,17.5,35Zm.075-12.565c1.907,1.317,3.162,2.233,3.731,2.722a1.18,1.18,0,0,0,.826.335h.038a.828.828,0,0,0,.657-.377A1.239,1.239,0,0,0,23,24.755c.03-.122,3.021-12.177,3.121-13.78,0-.06.008-.113.012-.162h0c.006-.072.012-.14.012-.208a1.365,1.365,0,0,0-.037-.377.4.4,0,0,0-.275-.3.66.66,0,0,0-.232-.036,1.861,1.861,0,0,0-.511.089h0C24.409,10.225,8.5,15.953,7.573,16.6c-.214.148-.275.23-.306.321a.475.475,0,0,0,.111.515.789.789,0,0,0,.235.162l4.271,1.392a.467.467,0,0,0,.216-.013l.028-.018c2.287-1.444,9.787-6.17,10.254-6.342a.19.19,0,0,1,.055-.009.076.076,0,0,1,.063.024.047.047,0,0,1,.006.043,7.579,7.579,0,0,1-1.312,1.474c-.66.653-1.565,1.51-2.689,2.548-1.884,1.739-3.768,3.416-3.847,3.486h0a.332.332,0,0,0-.049.078l-.008,0-.4,4.236a.79.79,0,0,0,.092.5.215.215,0,0,0,.169.074c.195,0,.487-.194.87-.577.913-.913,1.8-1.679,2.244-2.054Z" fill="#fff"/>
</svg>